{"version":3,"sources":["ng://ng-material-multilevel-menu/lib/materials.module.ts","ng://ng-material-multilevel-menu/lib/multilevel-menu.service.ts","ng://ng-material-multilevel-menu/lib/constants.ts","ng://ng-material-multilevel-menu/lib/ng-material-multilevel-menu.component.ts","ng://ng-material-multilevel-menu/lib/list-item/list-item.component.ts","ng://ng-material-multilevel-menu/lib/ng-material-multilevel-menu.module.ts"],"names":["MaterialsModule","NgModule","args","imports","MatIconModule","MatListModule","MatRippleModule","declarations","exports","MultilevelMenuService","BehaviorSubject","this","isLastItemClikedStorage","asObservable","prototype","generateId","text","possible","i","charAt","Math","floor","random","length","addRandomId","nodes","_this","forEach","node","index","id","items","undefined","recursiveCheckId","nodeId","some","nestedNode","updateClickedItem","isCliked","next","Injectable","providedIn","CONSTANT","NgMaterialMultilevelMenuComponent","multilevelMenuService","EventEmitter","paddingAtStart","listBackgroundColor","fontColor","selectedListFontColor","ngOnInit","checkValiddata","detectInvalidConfig","console","warn","filter","n","hidden","configuration","isInvalidConfig","config","nodeConfig","getClassName","classname","getGlobalStyle","styles","background","backgroundColor","selectedListItem","event","currentNode","selectedItem","emit","Component","selector","template","Input","Output","ListItemComponent","selectedListClasses","_a","ngOnChanges","nodeChildren","selectedNode","isLastItemCliked","subscribe","isClicked","isSelected","getPaddingAtStart","nodeConfiguration","getListStyle","color","hasItems","setClasses","classes","level","expanded","expand","animations","trigger","state","style","height","opacity","transition","group","animate","transform","NgMaterialMultilevelMenuModule","CommonModule"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatRippleModule,\r\n} from '@angular/material';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatRippleModule,\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatRippleModule,\r\n  ]\r\n})\r\nexport class MaterialsModule { }\r\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs/internal/BehaviorSubject';\nimport { Observable } from 'rxjs';\n\nimport { MultilevelNodes } from './app.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MultilevelMenuService {\n  isLastItemClikedStorage = new BehaviorSubject(false);\n  isLastItemCliked: Observable<boolean> = this.isLastItemClikedStorage.asObservable();\n  generateId(): string {\n    let text = '';\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    for (let i = 0; i < 20; i++) {\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\n    }\n    return text;\n  }\n  addRandomId(nodes: MultilevelNodes[]): void {\n    nodes.forEach((node: MultilevelNodes, index) => {\n      node.id = this.generateId();\n      if (node.items !== undefined) {\n        this.addRandomId(node.items);\n      }\n    });\n  }\n  recursiveCheckId(node: MultilevelNodes, nodeId: string): boolean {\n    if (node.id === nodeId) {\n      return true;\n    } else {\n      if (node.items !== undefined) {\n        return node.items.some((nestedNode: MultilevelNodes) => {\n          return this.recursiveCheckId(nestedNode, nodeId);\n        });\n      }\n    }\n  }\n  updateClickedItem(isCliked: boolean) {\n    this.isLastItemClikedStorage.next(isCliked);\n  }\n}\n","export const CONSTANT = {\r\n    PADDING_AT_START: true,\r\n    DEFAULT_CLASS_NAME: `amml-container`,\r\n    DEFAULT_LIST_CLASS_NAME: `amml-item`,\r\n    SELECTED_LIST_CLASS_NAME: `selected-amml-item`,\r\n    DEFAULT_SELECTED_FONT_COLOR: `#1976d2`,\r\n    DEFAULT_LIST_BACKGROUND_COLOR: `#fff`,\r\n    DEFAULT_LIST_FONT_COLOR: `rgba(0,0,0,.87)`,\r\n    ERROR_MESSAGE: `Invalid data for material Multilevel List Component`\r\n};\r\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\nimport { MultilevelMenuService } from './multilevel-menu.service';\n\nimport { Configuration, MultilevelNodes, BackgroundStyle } from './app.model';\nimport { CONSTANT } from './constants';\n\n@Component({\n  selector: 'ng-material-multilevel-menu',\n  template: `<div [ngClass]=\"getClassName()\" [ngStyle]=\"getGlobalStyle()\" *ngIf='items.length !== 0'>\r\n  <mat-list>\r\n    <ng-list-item \r\n      *ngFor=\"let node of items\" \r\n      [nodeConfiguration]='nodeConfig' \r\n      [node]='node' \r\n      [selectedNode]='currentNode' \r\n      (selectedItem)=\"selectedListItem($event)\r\n    \">\r\n    </ng-list-item>\r\n  </mat-list>\r\n</div>`,\n  styles: [`.amml-item{line-height:48px;display:flex;justify-content:space-between;position:relative}.anml-data{width:100%;text-transform:capitalize;display:flex;justify-content:start}.amml-icon{line-height:48px;margin-right:15px}.amml-icon-fa{font-size:20px}.amml-submenu{margin-left:16px}.active{color:#1976d2}`],\n})\nexport class NgMaterialMultilevelMenuComponent implements OnInit {\n  @Input() items: MultilevelNodes[];\n  @Input() configuration: Configuration = null;\n  @Output() selectedItem = new EventEmitter<MultilevelNodes>();\n  currentNode: MultilevelNodes;\n  nodeConfig: Configuration = {\n    paddingAtStart: true,\n    listBackgroundColor: null,\n    fontColor: null,\n    selectedListFontColor: null\n  };\n  isInvalidConfig = true;\n  isLastItemCliked = false;\n  constructor(\n    private multilevelMenuService: MultilevelMenuService\n  ) { }\n  ngOnInit() {\n    this.checkValiddata();\n    this.detectInvalidConfig();\n  }\n  checkValiddata(): void {\n    if (this.items.length === 0) {\n      console.warn(CONSTANT.ERROR_MESSAGE);\n    } else {\n      this.items = this.items.filter(n => !n.hidden);\n      this.multilevelMenuService.addRandomId(this.items);\n    }\n  }\n  detectInvalidConfig(): void {\n    if (this.configuration === null || this.configuration === undefined || this.configuration === '') {\n      this.isInvalidConfig = true;\n    } else {\n      this.isInvalidConfig = false;\n      const config = this.configuration;\n      if (config.paddingAtStart !== undefined && config.paddingAtStart !== null && typeof config.paddingAtStart === 'boolean') {\n        this.nodeConfig.paddingAtStart = config.paddingAtStart;\n      }\n      if (config.listBackgroundColor !== '' &&\n        config.listBackgroundColor !== null &&\n        config.listBackgroundColor !== undefined) {\n        this.nodeConfig.listBackgroundColor = config.listBackgroundColor;\n      }\n      if (config.fontColor !== '' &&\n        config.fontColor !== null &&\n        config.fontColor !== undefined) {\n        this.nodeConfig.fontColor = config.fontColor;\n      }\n      if (config.selectedListFontColor !== '' &&\n        config.selectedListFontColor !== null &&\n        config.selectedListFontColor !== undefined) {\n        this.nodeConfig.selectedListFontColor = config.selectedListFontColor;\n      }\n    }\n  }\n  getClassName(): string {\n    if (this.isInvalidConfig) {\n      return CONSTANT.DEFAULT_CLASS_NAME;\n    } else {\n      if (this.configuration.classname !== '' && this.configuration.classname !== null && this.configuration.classname !== undefined) {\n        return `${CONSTANT.DEFAULT_CLASS_NAME} ${this.configuration.classname}`;\n      } else {\n        return CONSTANT.DEFAULT_CLASS_NAME;\n      }\n    }\n  }\n  getGlobalStyle(): BackgroundStyle {\n    if (!this.isInvalidConfig) {\n      const styles = {\n        background : null\n      };\n      if (this.configuration.backgroundColor !== '' &&\n        this.configuration.backgroundColor !== null &&\n        this.configuration.backgroundColor !== undefined) {\n        styles.background = this.configuration.backgroundColor;\n      }\n      return styles;\n    }\n  }\n  selectedListItem(event: MultilevelNodes): void {\n    this.currentNode = event;\n    this.selectedItem.emit(event);\n  }\n}\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\nimport { trigger, style, transition, animate, state, group } from '@angular/animations';\n\nimport { MultilevelMenuService } from './../multilevel-menu.service';\n\nimport { Configuration, MultilevelNodes, ListStyle } from './../app.model';\nimport { CONSTANT } from './../constants';\n\n@Component({\n  selector: 'ng-list-item',\n  template: `<mat-list-item matRipple [ngClass]=\"selectedListClasses\" *ngIf=\"!node.hidden\" (click)=\"expand(node)\"\n  [ngStyle]=\"getListStyle()\">\n  <div class=\"anml-data\">\n    <span *ngIf=\"node.faIcon\" class=\"amml-icon amml-icon-fa\">\n      <i [ngClass]=\"node.faIcon\"></i>\n    </span>\n    <mat-icon *ngIf=\"node.icon\" class=\"amml-icon\">\n      {{node.icon}}\n    </mat-icon>\n    <span class=\"label\">{{node.label}}</span>\n  </div>\n  <mat-icon *ngIf='hasItems()' [@isExpanded]=\"hasItems() && node.expanded ? 'yes' : 'no'\">\n    keyboard_arrow_down\n  </mat-icon>\n</mat-list-item>\n\n<mat-divider></mat-divider>\n\n<div *ngIf=\"hasItems() && node.expanded\" [@slideInOut] [ngClass]=\"classes\">\n  <ng-list-item *ngFor=\"let singleNode of nodeChildren\" \n    [nodeConfiguration]='nodeConfiguration' \n    [node]='singleNode' \n    [level]=\"level + 1\"\n    [selectedNode]='selectedNode'\n    (selectedItem)=\"selectedListItem($event)\">\n  </ng-list-item>\n</div>\n`,\n  styles: [`.amml-item{line-height:48px;position:relative;cursor:pointer}.anml-data{width:100%;text-transform:capitalize;display:flex;justify-content:start;height:48px}.amml-icon{line-height:48px;margin-right:15px}.amml-icon-fa{font-size:20px}.label{line-height:48px}.amml-submenu{margin-left:16px}`],\n  animations: [\n    trigger('slideInOut', [\n      state('in', style({ height: '*', opacity: 0 })),\n      transition(':leave', [\n        style({ height: '*', opacity: 1 }),\n        group([\n          animate(300, style({ height: 0 })),\n          animate('200ms ease-in-out', style({ 'opacity': '0' }))\n        ])\n      ]),\n      transition(':enter', [\n        style({ height: '0', opacity: 0 }),\n        group([\n          animate(300, style({ height: '*' })),\n          animate('400ms ease-in-out', style({ 'opacity': '1' }))\n        ])\n      ])\n    ]),\n    trigger('isExpanded', [\n      state('no', style({ transform: 'rotate(-90deg)' })),\n      state('yes', style({ transform: 'rotate(0deg)', })),\n\n      transition('no => yes',\n        animate(300)\n      ),\n      transition('yes => no',\n        animate(300)\n      )\n    ])\n  ]\n})\nexport class ListItemComponent implements OnChanges {\n  @Input() node: MultilevelNodes;\n  @Input() level = 1;\n  @Input() selectedNode: MultilevelNodes;\n  @Input() nodeConfiguration: Configuration = null;\n  @Output() selectedItem = new EventEmitter<MultilevelNodes>();\n  isSelected = false;\n  nodeChildren: MultilevelNodes[];\n  classes: { [index: string]: boolean };\n  selectedListClasses: { [index: string]: boolean };\n  constructor(\n    private multilevelMenuService: MultilevelMenuService\n  ) {\n    this.selectedListClasses = {\n      [CONSTANT.DEFAULT_LIST_CLASS_NAME]: true,\n      [CONSTANT.SELECTED_LIST_CLASS_NAME]: false,\n    };\n  }\n  ngOnChanges() {\n    this.nodeChildren = this.node && this.node.items ? this.node.items.filter(n => !n.hidden) : [];\n    if (this.selectedNode !== undefined) {\n      this.multilevelMenuService.isLastItemCliked.subscribe( (isClicked: boolean) => {\n        if (isClicked) {\n          if (this.multilevelMenuService.recursiveCheckId(this.node, this.selectedNode.id)) {\n            this.isSelected = true;\n          } else {\n            this.isSelected = false;\n          }\n          this.selectedListClasses = {\n            [CONSTANT.DEFAULT_LIST_CLASS_NAME]: true,\n            [CONSTANT.SELECTED_LIST_CLASS_NAME]: this.isSelected,\n          };\n        }\n      });\n    }\n  }\n  getPaddingAtStart(): boolean {\n    return this.nodeConfiguration.paddingAtStart ? true : false;\n  }\n  getListStyle(): ListStyle {\n    const styles = {\n      background: CONSTANT.DEFAULT_LIST_BACKGROUND_COLOR,\n      color: CONSTANT.DEFAULT_LIST_FONT_COLOR\n    };\n    if (this.nodeConfiguration.listBackgroundColor !== null) {\n      styles.background = this.nodeConfiguration.listBackgroundColor;\n    }\n    if (this.isSelected) {\n      this.nodeConfiguration.selectedListFontColor !== null ?\n        styles.color = this.nodeConfiguration.selectedListFontColor : styles.color = CONSTANT.DEFAULT_SELECTED_FONT_COLOR;\n    } else if (this.nodeConfiguration.fontColor !== null) {\n      styles.color = this.nodeConfiguration.fontColor;\n    }\n    return styles;\n  }\n  hasItems(): boolean {\n    return this.nodeChildren.length > 0 ? true : false;\n  }\n  setClasses() {\n    this.classes = {\n      ['level-' + this.level]: true,\n      'amml-submenu': this.hasItems() && this.node.expanded && this.getPaddingAtStart()\n    };\n  }\n  expand(node: MultilevelNodes): void {\n    node.expanded = !node.expanded;\n    if (node.items === undefined) {\n      delete node.expanded;\n      this.selectedListItem(node);\n    }\n    this.setClasses();\n  }\n  selectedListItem(node: MultilevelNodes): void {\n    this.multilevelMenuService.updateClickedItem(true);\n    this.selectedItem.emit(node);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialsModule } from './materials.module';\n\nimport { NgMaterialMultilevelMenuComponent } from './ng-material-multilevel-menu.component';\nimport { ListItemComponent } from './list-item/list-item.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialsModule\n  ],\n  declarations: [NgMaterialMultilevelMenuComponent, ListItemComponent],\n  exports: [NgMaterialMultilevelMenuComponent]\n})\nexport class NgMaterialMultilevelMenuModule { }\n"]}