{"version":3,"sources":["ng://ng-material-multilevel-menu/lib/materials.module.ts","ng://ng-material-multilevel-menu/lib/multilevel-menu.service.ts","ng://ng-material-multilevel-menu/lib/constants.ts","ng://ng-material-multilevel-menu/lib/ng-material-multilevel-menu.component.ts","ng://ng-material-multilevel-menu/lib/list-item/list-item.component.ts","ng://ng-material-multilevel-menu/lib/ng-material-multilevel-menu.module.ts"],"names":["MaterialsModule","NgModule","args","imports","MatIconModule","MatListModule","MatRippleModule","declarations","exports","MultilevelMenuService","prototype","generateId","text","possible","i","charAt","Math","floor","random","length","addRandomId","nodes","_this","this","forEach","node","id","items","undefined","recursiveCheckId","nodeId","some","nestedNode","recursiveCheckLink","link","nodeIndex","key","hasOwnProperty","foundLinkObject","getMatchedObjectByUrl","Injectable","providedIn","CONSTANT","NgMaterialMultilevelMenuComponent","router","multilevelMenuService","EventEmitter","paddingAtStart","listBackgroundColor","fontColor","selectedListFontColor","interfaceWithRoute","ngOnChanges","checkValiddata","detectInvalidConfig","ngOnInit","configuration","events","subscribe","event","NavigationEnd","foundNode","url","currentNode","selectedListItem","console","warn","filter","n","hidden","isInvalidConfig","config","nodeConfig","getClassName","classname","getGlobalStyle","styles","background","backgroundColor","selectedItem","emit","Component","selector","template","Router","Input","Output","ListItemComponent","selectedListClasses","_a","nodeChildren","selectedNode","setSelectedClass","isFound","isSelected","expanded","setClasses","getPaddingAtStart","log","nodeConfiguration","getListStyle","color","hasItems","classes","level","expand","externalRedirect","window","location","href","navigate","animations","trigger","state","style","height","opacity","transition","group","animate","transform","NgMaterialMultilevelMenuModule","CommonModule"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatRippleModule,\r\n} from '@angular/material';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatRippleModule,\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatRippleModule,\r\n  ]\r\n})\r\nexport class MaterialsModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MultilevelNodes } from './app.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MultilevelMenuService {\r\n  foundLinkObject: MultilevelNodes;\r\n  generateId(): string {\r\n    let text = '';\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (let i = 0; i < 20; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  }\r\n  addRandomId(nodes: MultilevelNodes[]): void {\r\n    nodes.forEach((node: MultilevelNodes) => {\r\n      node.id = this.generateId();\r\n      if (node.items !== undefined) {\r\n        this.addRandomId(node.items);\r\n      }\r\n    });\r\n  }\r\n  recursiveCheckId(node: MultilevelNodes, nodeId: string): boolean {\r\n    if (node.id === nodeId) {\r\n      return true;\r\n    } else {\r\n      if (node.items !== undefined) {\r\n        return node.items.some((nestedNode: MultilevelNodes) => {\r\n          return this.recursiveCheckId(nestedNode, nodeId);\r\n        });\r\n      }\r\n    }\r\n  }\r\n  recursiveCheckLink(nodes: MultilevelNodes[], link: string): void {\r\n    for (let nodeIndex = 0; nodeIndex < nodes.length; nodeIndex++) {\r\n      const node = nodes[nodeIndex];\r\n      for (const key in node) {\r\n        if (node.hasOwnProperty(key)) {\r\n          if (node.link === link) {\r\n            this.foundLinkObject = node;\r\n          } else {\r\n            if (node.items !== undefined) {\r\n              this.recursiveCheckLink(node.items, link);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  getMatchedObjectByUrl(node: MultilevelNodes[], link: string): MultilevelNodes {\r\n    this.recursiveCheckLink(node, link);\r\n    return this.foundLinkObject;\r\n  }\r\n}\r\n","export const CONSTANT = {\r\n    PADDING_AT_START: true,\r\n    DEFAULT_CLASS_NAME: `amml-container`,\r\n    DEFAULT_LIST_CLASS_NAME: `amml-item`,\r\n    SELECTED_LIST_CLASS_NAME: `selected-amml-item`,\r\n    DEFAULT_SELECTED_FONT_COLOR: `#1976d2`,\r\n    DEFAULT_LIST_BACKGROUND_COLOR: `#fff`,\r\n    DEFAULT_LIST_FONT_COLOR: `rgba(0,0,0,.87)`,\r\n    ERROR_MESSAGE: `Invalid data for material Multilevel List Component`\r\n};\r\n","import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { MultilevelMenuService } from './multilevel-menu.service';\r\n\r\nimport { Configuration, MultilevelNodes, BackgroundStyle } from './app.model';\r\nimport { CONSTANT } from './constants';\r\n\r\n@Component({\r\n  selector: 'ng-material-multilevel-menu',\r\n  template: `<div [ngClass]=\"getClassName()\" [ngStyle]=\"getGlobalStyle()\" *ngIf='items.length !== 0'>\r\n  <mat-list>\r\n    <ng-list-item \r\n      *ngFor=\"let node of items\" \r\n      [nodeConfiguration]='nodeConfig' \r\n      [node]='node' \r\n      [selectedNode]='currentNode' \r\n      (selectedItem)=\"selectedListItem($event)\r\n    \">\r\n    </ng-list-item>\r\n  </mat-list>\r\n</div>`,\r\n  styles: [`.amml-item{line-height:48px;display:flex;justify-content:space-between;position:relative}.anml-data{width:100%;text-transform:capitalize;display:flex;justify-content:start}.amml-icon{line-height:48px;margin-right:15px}.amml-icon-fa{font-size:20px}.amml-submenu{margin-left:16px}.active{color:#1976d2}`],\r\n})\r\nexport class NgMaterialMultilevelMenuComponent implements OnInit, OnChanges {\r\n  @Input() items: MultilevelNodes[];\r\n  @Input() configuration: Configuration = null;\r\n  @Output() selectedItem = new EventEmitter<MultilevelNodes>();\r\n  currentNode: MultilevelNodes;\r\n  nodeConfig: Configuration = {\r\n    paddingAtStart: true,\r\n    listBackgroundColor: null,\r\n    fontColor: null,\r\n    selectedListFontColor: null,\r\n    interfaceWithRoute: null\r\n  };\r\n  isInvalidConfig = true;\r\n  constructor(\r\n    private router: Router,\r\n    private multilevelMenuService: MultilevelMenuService\r\n  ) { }\r\n  ngOnChanges() {\r\n    this.checkValiddata();\r\n    this.detectInvalidConfig();\r\n  }\r\n  ngOnInit() {\r\n    if (\r\n      this.configuration !== null && this.configuration !== undefined && this.configuration !== '' &&\r\n      this.configuration.interfaceWithRoute !== null && this.configuration.interfaceWithRoute) {\r\n      this.router.events\r\n        .subscribe((event) => {\r\n          if (event instanceof NavigationEnd) {\r\n            const foundNode = this.multilevelMenuService.getMatchedObjectByUrl(this.items, event.url);\r\n            if (\r\n              foundNode !== undefined &&\r\n              foundNode.link !== undefined &&\r\n              foundNode.link !== null &&\r\n              foundNode.link !== ''\r\n            ) {\r\n              this.currentNode = foundNode;\r\n              this.selectedListItem(foundNode);\r\n            }\r\n          }\r\n        });\r\n    }\r\n  }\r\n  checkValiddata(): void {\r\n    if (this.items.length === 0) {\r\n      console.warn(CONSTANT.ERROR_MESSAGE);\r\n    } else {\r\n      this.items = this.items.filter(n => !n.hidden);\r\n      this.multilevelMenuService.addRandomId(this.items);\r\n    }\r\n  }\r\n  detectInvalidConfig(): void {\r\n    if (this.configuration === null || this.configuration === undefined || this.configuration === '') {\r\n      this.isInvalidConfig = true;\r\n    } else {\r\n      this.isInvalidConfig = false;\r\n      const config = this.configuration;\r\n      if (config.paddingAtStart !== undefined && config.paddingAtStart !== null && typeof config.paddingAtStart === 'boolean') {\r\n        this.nodeConfig.paddingAtStart = config.paddingAtStart;\r\n      }\r\n      if (config.listBackgroundColor !== '' &&\r\n        config.listBackgroundColor !== null &&\r\n        config.listBackgroundColor !== undefined) {\r\n        this.nodeConfig.listBackgroundColor = config.listBackgroundColor;\r\n      }\r\n      if (config.fontColor !== '' &&\r\n        config.fontColor !== null &&\r\n        config.fontColor !== undefined) {\r\n        this.nodeConfig.fontColor = config.fontColor;\r\n      }\r\n      if (config.selectedListFontColor !== '' &&\r\n        config.selectedListFontColor !== null &&\r\n        config.selectedListFontColor !== undefined) {\r\n        this.nodeConfig.selectedListFontColor = config.selectedListFontColor;\r\n      }\r\n      if (config.interfaceWithRoute !== null &&\r\n        config.interfaceWithRoute !== undefined &&\r\n        typeof config.interfaceWithRoute === 'boolean') {\r\n        this.nodeConfig.interfaceWithRoute = config.interfaceWithRoute;\r\n      }\r\n    }\r\n  }\r\n  getClassName(): string {\r\n    if (this.isInvalidConfig) {\r\n      return CONSTANT.DEFAULT_CLASS_NAME;\r\n    } else {\r\n      if (this.configuration.classname !== '' && this.configuration.classname !== null && this.configuration.classname !== undefined) {\r\n        return `${CONSTANT.DEFAULT_CLASS_NAME} ${this.configuration.classname}`;\r\n      } else {\r\n        return CONSTANT.DEFAULT_CLASS_NAME;\r\n      }\r\n    }\r\n  }\r\n  getGlobalStyle(): BackgroundStyle {\r\n    if (!this.isInvalidConfig) {\r\n      const styles = {\r\n        background : null\r\n      };\r\n      if (this.configuration.backgroundColor !== '' &&\r\n        this.configuration.backgroundColor !== null &&\r\n        this.configuration.backgroundColor !== undefined) {\r\n        styles.background = this.configuration.backgroundColor;\r\n      }\r\n      return styles;\r\n    }\r\n  }\r\n  selectedListItem(event: MultilevelNodes): void {\r\n    this.currentNode = event;\r\n    this.selectedItem.emit(event);\r\n  }\r\n}\r\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { trigger, style, transition, animate, state, group } from '@angular/animations';\r\n\r\nimport { MultilevelMenuService } from './../multilevel-menu.service';\r\n\r\nimport { Configuration, MultilevelNodes, ListStyle } from './../app.model';\r\nimport { CONSTANT } from './../constants';\r\n\r\n@Component({\r\n  selector: 'ng-list-item',\r\n  template: `<mat-list-item matRipple [ngClass]=\"selectedListClasses\" *ngIf=\"!node.hidden\" (click)=\"expand(node)\"\r\n  [ngStyle]=\"getListStyle()\">\r\n  <div class=\"anml-data\">\r\n    <span *ngIf=\"node.faIcon\" class=\"amml-icon amml-icon-fa\">\r\n      <i [ngClass]=\"node.faIcon\"></i>\r\n    </span>\r\n    <mat-icon *ngIf=\"node.icon\" class=\"amml-icon\">\r\n      {{node.icon}}\r\n    </mat-icon>\r\n    <span class=\"label\">{{node.label}}</span>\r\n  </div>\r\n  <mat-icon *ngIf='hasItems()' [@isExpanded]=\"hasItems() && expanded ? 'yes' : 'no'\">\r\n    keyboard_arrow_down\r\n  </mat-icon>\r\n</mat-list-item>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div *ngIf=\"hasItems() && expanded\" [@slideInOut] [ngClass]=\"classes\">\r\n  <ng-list-item *ngFor=\"let singleNode of nodeChildren\" \r\n    [nodeConfiguration]='nodeConfiguration' \r\n    [node]='singleNode' \r\n    [level]=\"level + 1\"\r\n    [selectedNode]='selectedNode'\r\n    (selectedItem)=\"selectedListItem($event)\">\r\n  </ng-list-item>\r\n</div>\r\n`,\r\n  styles: [`.amml-item{line-height:48px;position:relative;cursor:pointer}.anml-data{width:100%;text-transform:capitalize;display:flex;justify-content:start;height:48px}.amml-icon{line-height:48px;margin-right:15px}.amml-icon-fa{font-size:20px}.label{line-height:48px}.amml-submenu{margin-left:16px}`],\r\n  animations: [\r\n    trigger('slideInOut', [\r\n      state('in', style({ height: '*', opacity: 0 })),\r\n      transition(':leave', [\r\n        style({ height: '*', opacity: 0.2 }),\r\n        group([\r\n          animate(300, style({ height: 0 })),\r\n          animate('200ms ease-out', style({ opacity: 0 }))\r\n        ])\r\n      ]),\r\n      transition(':enter', [\r\n        style({ height: '0', opacity: 0 }),\r\n        group([\r\n          animate(200, style({ height: '*' })),\r\n          animate('400ms ease-out', style({ opacity: 1 }))\r\n        ])\r\n      ])\r\n    ]),\r\n    trigger('isExpanded', [\r\n      state('no', style({ transform: 'rotate(-90deg)' })),\r\n      state('yes', style({ transform: 'rotate(0deg)', })),\r\n\r\n      transition('no => yes',\r\n        animate(300)\r\n      ),\r\n      transition('yes => no',\r\n        animate(300)\r\n      )\r\n    ])\r\n  ]\r\n})\r\nexport class ListItemComponent implements OnChanges {\r\n  @Input() node: MultilevelNodes;\r\n  @Input() level = 1;\r\n  @Input() selectedNode: MultilevelNodes;\r\n  @Input() nodeConfiguration: Configuration = null;\r\n  @Output() selectedItem = new EventEmitter<MultilevelNodes>();\r\n  isSelected = false;\r\n  nodeChildren: MultilevelNodes[];\r\n  classes: { [index: string]: boolean };\r\n  selectedListClasses: { [index: string]: boolean };\r\n  expanded = false;\r\n  constructor(\r\n    private router: Router,\r\n    private multilevelMenuService: MultilevelMenuService\r\n  ) {\r\n    this.selectedListClasses = {\r\n      [CONSTANT.DEFAULT_LIST_CLASS_NAME]: true,\r\n      [CONSTANT.SELECTED_LIST_CLASS_NAME]: false,\r\n    };\r\n  }\r\n  ngOnChanges() {\r\n    this.nodeChildren = this.node && this.node.items ? this.node.items.filter(n => !n.hidden) : [];\r\n    if (this.selectedNode !== undefined && this.selectedNode !== null) {\r\n      this.setSelectedClass(this.multilevelMenuService.recursiveCheckId(this.node, this.selectedNode.id));\r\n    }\r\n  }\r\n  setSelectedClass(isFound: boolean): void {\r\n    if (isFound) {\r\n      this.isSelected = true;\r\n      this.expanded = true;\r\n    } else {\r\n      this.isSelected = false;\r\n    }\r\n    this.selectedListClasses = {\r\n      [CONSTANT.DEFAULT_LIST_CLASS_NAME]: true,\r\n      [CONSTANT.SELECTED_LIST_CLASS_NAME]: this.isSelected,\r\n    };\r\n    this.setClasses();\r\n  }\r\n  getPaddingAtStart(): boolean {\r\n    console.log(this.nodeConfiguration);\r\n    return this.nodeConfiguration.paddingAtStart ? true : false;\r\n  }\r\n  getListStyle(): ListStyle {\r\n    const styles = {\r\n      background: CONSTANT.DEFAULT_LIST_BACKGROUND_COLOR,\r\n      color: CONSTANT.DEFAULT_LIST_FONT_COLOR\r\n    };\r\n    if (this.nodeConfiguration.listBackgroundColor !== null) {\r\n      styles.background = this.nodeConfiguration.listBackgroundColor;\r\n    }\r\n    if (this.isSelected) {\r\n      this.nodeConfiguration.selectedListFontColor !== null ?\r\n        styles.color = this.nodeConfiguration.selectedListFontColor : styles.color = CONSTANT.DEFAULT_SELECTED_FONT_COLOR;\r\n    } else if (this.nodeConfiguration.fontColor !== null) {\r\n      styles.color = this.nodeConfiguration.fontColor;\r\n    }\r\n    return styles;\r\n  }\r\n  hasItems(): boolean {\r\n    return this.nodeChildren.length > 0 ? true : false;\r\n  }\r\n  setClasses(): void {\r\n    this.classes = {\r\n      ['level-' + this.level]: true,\r\n      'amml-submenu': this.hasItems() && this.expanded && this.getPaddingAtStart()\r\n    };\r\n  }\r\n  expand(node: MultilevelNodes): void {\r\n    this.expanded = !this.expanded;\r\n    this.setClasses();\r\n    if (this.nodeConfiguration.interfaceWithRoute !== null\r\n      && this.nodeConfiguration.interfaceWithRoute\r\n      && node.link !== undefined\r\n    ) {\r\n      if (node.externalRedirect !== undefined && node.externalRedirect) {\r\n        window.location.href = node.link;\r\n      } else {\r\n        this.router.navigate([node.link]);\r\n      }\r\n    } else if (node.items === undefined) {\r\n      this.selectedListItem(node);\r\n    }\r\n  }\r\n  selectedListItem(node: MultilevelNodes): void {\r\n    this.selectedItem.emit(node);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialsModule } from './materials.module';\r\n\r\nimport { NgMaterialMultilevelMenuComponent } from './ng-material-multilevel-menu.component';\r\nimport { ListItemComponent } from './list-item/list-item.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MaterialsModule\r\n  ],\r\n  declarations: [NgMaterialMultilevelMenuComponent, ListItemComponent],\r\n  exports: [NgMaterialMultilevelMenuComponent]\r\n})\r\nexport class NgMaterialMultilevelMenuModule { }\r\n"]}