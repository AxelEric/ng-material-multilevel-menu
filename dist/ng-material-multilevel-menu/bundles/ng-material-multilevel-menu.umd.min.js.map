{"version":3,"sources":["ng://ng-material-multilevel-menu/lib/materials.module.ts","ng://ng-material-multilevel-menu/lib/multilevel-menu.service.ts","ng://ng-material-multilevel-menu/lib/constants.ts","ng://ng-material-multilevel-menu/lib/ng-material-multilevel-menu.component.ts","ng://ng-material-multilevel-menu/lib/list-item/list-item.component.ts","ng://ng-material-multilevel-menu/lib/ng-material-multilevel-menu.module.ts"],"names":["MaterialsModule","NgModule","args","imports","MatIconModule","MatListModule","MatRippleModule","declarations","exports","MultilevelMenuService","prototype","generateId","text","possible","i","charAt","Math","floor","random","length","addRandomId","nodes","_this","this","forEach","node","id","items","undefined","recursiveCheckId","nodeId","some","nestedNode","recursiveCheckLink","link","nodeIndex","key","hasOwnProperty","foundLinkObject","getMatchedObjectByUrl","Injectable","providedIn","CONSTANT","NgMaterialMultilevelMenuComponent","router","multilevelMenuService","EventEmitter","paddingAtStart","listBackgroundColor","fontColor","selectedListFontColor","interfaceWithRoute","collapseOnSelect","highlightOnSelect","ngOnChanges","checkValiddata","detectInvalidConfig","ngOnInit","configuration","events","subscribe","event","NavigationEnd","updateNodeByURL","url","foundNode","currentNode","selectedListItem","console","warn","filter","n","hidden","isInvalidConfig","config","nodeConfig","getClassName","classname","getGlobalStyle","styles","background","backgroundColor","onSelected","selectedItem","emit","Component","selector","template","Router","Input","Output","ListItemComponent","selectedListClasses","_a","nodeChildren","selectedNode","setSelectedClass","isFound","expanded","isSelected","nodeConfiguration","setClasses","getPaddingAtStart","getListStyle","color","hasItems","classes","level","expand","externalRedirect","window","location","href","navigate","animations","trigger","state","style","height","opacity","transition","group","animate","transform","NgMaterialMultilevelMenuModule","CommonModule"],"mappings":"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","sourcesContent":["import { NgModule } from '@angular/core';\r\n\r\nimport {\r\n  MatIconModule,\r\n  MatListModule,\r\n  MatRippleModule,\r\n} from '@angular/material';\r\n\r\n@NgModule({\r\n  imports: [\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatRippleModule,\r\n  ],\r\n  declarations: [],\r\n  exports: [\r\n    MatIconModule,\r\n    MatListModule,\r\n    MatRippleModule,\r\n  ]\r\n})\r\nexport class MaterialsModule { }\r\n","import { Injectable } from '@angular/core';\r\nimport { MultilevelNodes } from './app.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class MultilevelMenuService {\r\n  foundLinkObject: MultilevelNodes;\r\n  generateId(): string {\r\n    let text = '';\r\n    const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n    for (let i = 0; i < 20; i++) {\r\n      text += possible.charAt(Math.floor(Math.random() * possible.length));\r\n    }\r\n    return text;\r\n  }\r\n  addRandomId(nodes: MultilevelNodes[]): void {\r\n    nodes.forEach((node: MultilevelNodes) => {\r\n      node.id = this.generateId();\r\n      if (node.items !== undefined) {\r\n        this.addRandomId(node.items);\r\n      }\r\n    });\r\n  }\r\n  recursiveCheckId(node: MultilevelNodes, nodeId: string): boolean {\r\n    if (node.id === nodeId) {\r\n      return true;\r\n    } else {\r\n      if (node.items !== undefined) {\r\n        return node.items.some((nestedNode: MultilevelNodes) => {\r\n          return this.recursiveCheckId(nestedNode, nodeId);\r\n        });\r\n      }\r\n    }\r\n  }\r\n  recursiveCheckLink(nodes: MultilevelNodes[], link: string): void {\r\n    for (let nodeIndex = 0; nodeIndex < nodes.length; nodeIndex++) {\r\n      const node = nodes[nodeIndex];\r\n      for (const key in node) {\r\n        if (node.hasOwnProperty(key)) {\r\n          if (node.link === link) {\r\n            this.foundLinkObject = node;\r\n          } else {\r\n            if (node.items !== undefined) {\r\n              this.recursiveCheckLink(node.items, link);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n  getMatchedObjectByUrl(node: MultilevelNodes[], link: string): MultilevelNodes {\r\n    this.recursiveCheckLink(node, link);\r\n    return this.foundLinkObject;\r\n  }\r\n}\r\n","export const CONSTANT = {\r\n    PADDING_AT_START: true,\r\n    DEFAULT_CLASS_NAME: `amml-container`,\r\n    DEFAULT_LIST_CLASS_NAME: `amml-item`,\r\n    SELECTED_LIST_CLASS_NAME: `selected-amml-item`,\r\n    DEFAULT_SELECTED_FONT_COLOR: `#1976d2`,\r\n    DEFAULT_LIST_BACKGROUND_COLOR: `#fff`,\r\n    DEFAULT_LIST_FONT_COLOR: `rgba(0,0,0,.87)`,\r\n    ERROR_MESSAGE: `Invalid data for material Multilevel List Component`\r\n};\r\n","import { Component, OnInit, OnChanges, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { MultilevelMenuService } from './multilevel-menu.service';\r\n\r\nimport { Configuration, MultilevelNodes, BackgroundStyle } from './app.model';\r\nimport { CONSTANT } from './constants';\r\n\r\n@Component({\r\n  selector: 'ng-material-multilevel-menu',\r\n  template: `<div [ngClass]=\"getClassName()\" [ngStyle]=\"getGlobalStyle()\" *ngIf='items.length !== 0'>\r\n  <mat-list>\r\n    <ng-list-item \r\n      *ngFor=\"let node of items\" \r\n      [nodeConfiguration]='nodeConfig' \r\n      [node]='node' \r\n      [selectedNode]='currentNode' \r\n      (selectedItem)=\"selectedListItem($event)\r\n    \">\r\n    </ng-list-item>\r\n  </mat-list>\r\n</div>`,\r\n  styles: [`.amml-item{line-height:48px;display:flex;justify-content:space-between;position:relative}.anml-data{width:100%;text-transform:capitalize;display:flex;justify-content:start}.amml-icon{line-height:48px;margin-right:15px}.amml-icon-fa{font-size:20px}.amml-submenu{margin-left:16px}.active{color:#1976d2}`],\r\n})\r\nexport class NgMaterialMultilevelMenuComponent implements OnInit, OnChanges {\r\n  @Input() items: MultilevelNodes[];\r\n  @Input() configuration: Configuration = null;\r\n  @Output() selectedItem = new EventEmitter<MultilevelNodes>();\r\n  currentNode: MultilevelNodes;\r\n  nodeConfig: Configuration = {\r\n    paddingAtStart: true,\r\n    listBackgroundColor: null,\r\n    fontColor: null,\r\n    selectedListFontColor: null,\r\n    interfaceWithRoute: null,\r\n    collapseOnSelect: null,\r\n    highlightOnSelect: false\r\n  };\r\n  isInvalidConfig = true;\r\n  constructor(\r\n    private router: Router,\r\n    private multilevelMenuService: MultilevelMenuService\r\n  ) { }\r\n  ngOnChanges() {\r\n    this.checkValiddata();\r\n    this.detectInvalidConfig();\r\n  }\r\n  ngOnInit() {\r\n    if (\r\n      this.configuration !== null && this.configuration !== undefined && this.configuration !== '' &&\r\n      this.configuration.interfaceWithRoute !== null && this.configuration.interfaceWithRoute) {\r\n      this.router.events\r\n        .subscribe((event) => {\r\n          if (event instanceof NavigationEnd) {\r\n            this.updateNodeByURL(event.url);\r\n          }\r\n        });\r\n      this.updateNodeByURL(this.router.url);\r\n    }\r\n  }\r\n  updateNodeByURL(url: string): void {\r\n    const foundNode = this.multilevelMenuService.getMatchedObjectByUrl(this.items, url);\r\n    if (\r\n      foundNode !== undefined &&\r\n      foundNode.link !== undefined &&\r\n      foundNode.link !== null &&\r\n      foundNode.link !== ''\r\n    ) {\r\n      this.currentNode = foundNode;\r\n      this.selectedListItem(foundNode);\r\n    }\r\n  }\r\n  checkValiddata(): void {\r\n    if (this.items.length === 0) {\r\n      console.warn(CONSTANT.ERROR_MESSAGE);\r\n    } else {\r\n      this.items = this.items.filter(n => !n.hidden);\r\n      this.multilevelMenuService.addRandomId(this.items);\r\n    }\r\n  }\r\n  detectInvalidConfig(): void {\r\n    if (this.configuration === null || this.configuration === undefined || this.configuration === '') {\r\n      this.isInvalidConfig = true;\r\n    } else {\r\n      this.isInvalidConfig = false;\r\n      const config = this.configuration;\r\n      if (config.paddingAtStart !== undefined && config.paddingAtStart !== null && typeof config.paddingAtStart === 'boolean') {\r\n        this.nodeConfig.paddingAtStart = config.paddingAtStart;\r\n      }\r\n      if (config.listBackgroundColor !== '' &&\r\n        config.listBackgroundColor !== null &&\r\n        config.listBackgroundColor !== undefined) {\r\n        this.nodeConfig.listBackgroundColor = config.listBackgroundColor;\r\n      }\r\n      if (config.fontColor !== '' &&\r\n        config.fontColor !== null &&\r\n        config.fontColor !== undefined) {\r\n        this.nodeConfig.fontColor = config.fontColor;\r\n      }\r\n      if (config.selectedListFontColor !== '' &&\r\n        config.selectedListFontColor !== null &&\r\n        config.selectedListFontColor !== undefined) {\r\n        this.nodeConfig.selectedListFontColor = config.selectedListFontColor;\r\n      }\r\n      if (config.interfaceWithRoute !== null &&\r\n        config.interfaceWithRoute !== undefined &&\r\n        typeof config.interfaceWithRoute === 'boolean') {\r\n        this.nodeConfig.interfaceWithRoute = config.interfaceWithRoute;\r\n      }\r\n      if (config.collapseOnSelect !== null &&\r\n        config.collapseOnSelect !== undefined &&\r\n        typeof config.collapseOnSelect === 'boolean') {\r\n        this.nodeConfig.collapseOnSelect = config.collapseOnSelect;\r\n      }\r\n      if (config.highlightOnSelect !== null &&\r\n        config.highlightOnSelect !== undefined &&\r\n        typeof config.highlightOnSelect === 'boolean') {\r\n        this.nodeConfig.highlightOnSelect = config.highlightOnSelect;\r\n      }\r\n    }\r\n  }\r\n  getClassName(): string {\r\n    if (this.isInvalidConfig) {\r\n      return CONSTANT.DEFAULT_CLASS_NAME;\r\n    } else {\r\n      if (this.configuration.classname !== '' && this.configuration.classname !== null && this.configuration.classname !== undefined) {\r\n        return `${CONSTANT.DEFAULT_CLASS_NAME} ${this.configuration.classname}`;\r\n      } else {\r\n        return CONSTANT.DEFAULT_CLASS_NAME;\r\n      }\r\n    }\r\n  }\r\n  getGlobalStyle(): BackgroundStyle {\r\n    if (!this.isInvalidConfig) {\r\n      const styles = {\r\n        background : null\r\n      };\r\n      if (this.configuration.backgroundColor !== '' &&\r\n        this.configuration.backgroundColor !== null &&\r\n        this.configuration.backgroundColor !== undefined) {\r\n        styles.background = this.configuration.backgroundColor;\r\n      }\r\n      return styles;\r\n    }\r\n  }\r\n  selectedListItem(event: MultilevelNodes): void {\r\n    this.currentNode = event;\r\n    if (event.items === undefined && !event.onSelected) {\r\n      this.selectedItem.emit(event);\r\n    }\r\n  }\r\n}\r\n","import { Component, OnChanges, Input, Output, EventEmitter } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { trigger, style, transition, animate, state, group } from '@angular/animations';\r\n\r\nimport { MultilevelMenuService } from './../multilevel-menu.service';\r\n\r\nimport { Configuration, MultilevelNodes, ListStyle } from './../app.model';\r\nimport { CONSTANT } from './../constants';\r\n\r\n@Component({\r\n  selector: 'ng-list-item',\r\n  template: `<mat-list-item matRipple [ngClass]=\"selectedListClasses\" *ngIf=\"!node.hidden\" (click)=\"expand(node)\" title=\"{{node.label}}\"\r\n  [ngStyle]=\"getListStyle()\">\r\n  <div class=\"anml-data\">\r\n    <span *ngIf=\"node.faIcon\" class=\"amml-icon amml-icon-fa\">\r\n      <i [ngClass]=\"node.faIcon\"></i>\r\n    </span>\r\n    <mat-icon *ngIf=\"node.icon\" class=\"amml-icon\">\r\n      {{node.icon}}\r\n    </mat-icon>\r\n    <span class=\"label\">{{node.label}}</span>\r\n  </div>\r\n  <mat-icon *ngIf='hasItems()' [@isExpanded]=\"hasItems() && expanded ? 'yes' : 'no'\">\r\n    keyboard_arrow_down\r\n  </mat-icon>\r\n</mat-list-item>\r\n\r\n<mat-divider></mat-divider>\r\n\r\n<div *ngIf=\"hasItems() && expanded\" [@slideInOut] [ngClass]=\"classes\">\r\n  <ng-list-item *ngFor=\"let singleNode of nodeChildren\" \r\n    [nodeConfiguration]='nodeConfiguration' \r\n    [node]='singleNode' \r\n    [level]=\"level + 1\"\r\n    [selectedNode]='selectedNode'\r\n    (selectedItem)=\"selectedListItem($event)\">\r\n  </ng-list-item>\r\n</div>\r\n`,\r\n  styles: [`.amml-item{line-height:48px;position:relative;cursor:pointer}.anml-data{width:100%;text-transform:capitalize;display:flex;justify-content:start;height:48px}.amml-icon{line-height:48px;margin-right:15px}.amml-icon-fa{font-size:20px}.label{line-height:48px}.amml-submenu{margin-left:16px}`],\r\n  animations: [\r\n    trigger('slideInOut', [\r\n      state('in', style({ height: '*', opacity: 0 })),\r\n      transition(':leave', [\r\n        style({ height: '*', opacity: 0.2 }),\r\n        group([\r\n          animate(300, style({ height: 0 })),\r\n          animate('200ms ease-out', style({ opacity: 0 }))\r\n        ])\r\n      ]),\r\n      transition(':enter', [\r\n        style({ height: '0', opacity: 0 }),\r\n        group([\r\n          animate(200, style({ height: '*' })),\r\n          animate('400ms ease-out', style({ opacity: 1 }))\r\n        ])\r\n      ])\r\n    ]),\r\n    trigger('isExpanded', [\r\n      state('no', style({ transform: 'rotate(-90deg)' })),\r\n      state('yes', style({ transform: 'rotate(0deg)', })),\r\n\r\n      transition('no => yes',\r\n        animate(300)\r\n      ),\r\n      transition('yes => no',\r\n        animate(300)\r\n      )\r\n    ])\r\n  ]\r\n})\r\nexport class ListItemComponent implements OnChanges {\r\n  @Input() node: MultilevelNodes;\r\n  @Input() level = 1;\r\n  @Input() selectedNode: MultilevelNodes;\r\n  @Input() nodeConfiguration: Configuration = null;\r\n  @Output() selectedItem = new EventEmitter<MultilevelNodes>();\r\n  isSelected = false;\r\n  nodeChildren: MultilevelNodes[];\r\n  classes: { [index: string]: boolean };\r\n  selectedListClasses: { [index: string]: boolean };\r\n  expanded = false;\r\n  constructor(\r\n    private router: Router,\r\n    private multilevelMenuService: MultilevelMenuService\r\n  ) {\r\n    this.selectedListClasses = {\r\n      [CONSTANT.DEFAULT_LIST_CLASS_NAME]: true,\r\n      [CONSTANT.SELECTED_LIST_CLASS_NAME]: false,\r\n    };\r\n  }\r\n  ngOnChanges() {\r\n    this.nodeChildren = this.node && this.node.items ? this.node.items.filter(n => !n.hidden) : [];\r\n    if (this.selectedNode !== undefined && this.selectedNode !== null) {\r\n      this.setSelectedClass(this.multilevelMenuService.recursiveCheckId(this.node, this.selectedNode.id));\r\n    }\r\n  }\r\n  setSelectedClass(isFound: boolean): void {\r\n    if (isFound) {\r\n      this.expanded = true;\r\n      this.isSelected = this.nodeConfiguration.highlightOnSelect || this.selectedNode.items === undefined ? true : false;\r\n    } else {\r\n      this.isSelected = false;\r\n      if (this.nodeConfiguration.collapseOnSelect) {\r\n        this.expanded = false;\r\n      }\r\n    }\r\n    this.selectedListClasses = {\r\n      [CONSTANT.DEFAULT_LIST_CLASS_NAME]: true,\r\n      [CONSTANT.SELECTED_LIST_CLASS_NAME]: this.isSelected,\r\n    };\r\n    this.setClasses();\r\n  }\r\n  getPaddingAtStart(): boolean {\r\n    return this.nodeConfiguration.paddingAtStart ? true : false;\r\n  }\r\n  getListStyle(): ListStyle {\r\n    const styles = {\r\n      background: CONSTANT.DEFAULT_LIST_BACKGROUND_COLOR,\r\n      color: CONSTANT.DEFAULT_LIST_FONT_COLOR\r\n    };\r\n    if (this.nodeConfiguration.listBackgroundColor !== null) {\r\n      styles.background = this.nodeConfiguration.listBackgroundColor;\r\n    }\r\n    if (this.isSelected) {\r\n      this.nodeConfiguration.selectedListFontColor !== null ?\r\n        styles.color = this.nodeConfiguration.selectedListFontColor : styles.color = CONSTANT.DEFAULT_SELECTED_FONT_COLOR;\r\n    } else if (this.nodeConfiguration.fontColor !== null) {\r\n      styles.color = this.nodeConfiguration.fontColor;\r\n    }\r\n    return styles;\r\n  }\r\n  hasItems(): boolean {\r\n    return this.nodeChildren.length > 0 ? true : false;\r\n  }\r\n  setClasses(): void {\r\n    this.classes = {\r\n      ['level-' + this.level]: true,\r\n      'amml-submenu': this.hasItems() && this.expanded && this.getPaddingAtStart()\r\n    };\r\n  }\r\n  expand(node: MultilevelNodes): void {\r\n    this.expanded = !this.expanded;\r\n    this.setClasses();\r\n    if (node.onSelected) {\r\n      node.onSelected(node);\r\n      this.selectedListItem(node);\r\n    } else if (this.nodeConfiguration.interfaceWithRoute !== null\r\n      && this.nodeConfiguration.interfaceWithRoute\r\n      && node.link !== undefined\r\n    ) {\r\n      if (node.externalRedirect !== undefined && node.externalRedirect) {\r\n        window.location.href = node.link;\r\n      } else {\r\n        this.router.navigate([node.link]);\r\n      }\r\n    } else if (node.items === undefined || this.nodeConfiguration.collapseOnSelect) {\r\n      this.selectedListItem(node);\r\n    }\r\n  }\r\n  selectedListItem(node: MultilevelNodes): void {\r\n    this.selectedItem.emit(node);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MaterialsModule } from './materials.module';\r\n\r\nimport { NgMaterialMultilevelMenuComponent } from './ng-material-multilevel-menu.component';\r\nimport { ListItemComponent } from './list-item/list-item.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    MaterialsModule\r\n  ],\r\n  declarations: [NgMaterialMultilevelMenuComponent, ListItemComponent],\r\n  exports: [NgMaterialMultilevelMenuComponent]\r\n})\r\nexport class NgMaterialMultilevelMenuModule { }\r\n"]}